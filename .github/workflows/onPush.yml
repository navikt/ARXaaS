name: Bulid, test, package and deploy

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*.*.*'

env:
  DOCKER_IMAGE: docker.pkg.github.com/${{ github.repository }}/arxaas
  CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set JDK to 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Download and cache dependencies
        run: wget  https://arx.deidentifier.org/?ddownload=1924 -O libarx-3.8.0.jar
      - name: Maven install libarx as local dependency
        run: mvn -q install:install-file -Dfile=libarx-3.8.0.jar -DgroupId=org.deidentifier -DartifactId=libarx -Dversion=3.8.0 -Dpackaging=jar
      - name: prepare code climate test reporter
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build
      - name: resolve dependencies, plugins, reports
        run: mvn dependency:go-offline
      - name: Create and store version tag
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=12 HEAD)
          VERSION="$TIME-$COMMIT"
          echo "version $VERSION"
          echo $VERSION > docker_img_tag.txt
      - name: Set version in pom
        run: |
          mvn versions:set -DnewVersion="$(cat docker_img_tag.txt)"
          mvn versions:commit
      - name: Run test and package
        run: mvn package
        env:
          CI: true
      - name: Run code climate test reporter and upload
        run: |
          JACOCO_SOURCE_PATH=src/main/java ./cc-test-reporter format-coverage -d ./target/site/jacoco/jacoco.xml --input-type jacoco
          ./cc-test-reporter upload-coverage -d
      - name: Upload img tag
        uses: actions/upload-artifact@v1
        with:
          name: img_tag
          path: docker_img_tag.txt
      - name: Upload target
        uses: actions/upload-artifact@v1
        with:
          name: target
          path: target

  publish_docs:
    name: Publish documentation
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: refs/heads/master
      - name: Download target folder
        uses: actions/download-artifact@v1
        with:
          name: target
      - name: Install and configure dependencies
        run: |
          npm install -g --silent gh-pages@2.0.1
          git config user.email $GITHUB_PAGES_EMAIL
          git config user.name "ci-build"
      - name: Deploy docs to gh-pages branch
        run: gh-pages --dist target/generated-docs --message "[ci skip]"

  publish_to_docker:
    name: Build and push docker image
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: refs/heads/master
      - name: Set JDK to 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Download image tage
        uses: actions/download-artifact@v1
        with:
          name: img_tag
      - name: Download target folder
        uses: actions/download-artifact@v1
        with:
          name: target
      - name: Setup image env
        run: |
          VALUE=${DOCKER_IMAGE}:$(cat img_tag/docker_img_tag.txt)
          echo ${VALUE}
          echo ::set-env name=IMAGE::${VALUE}
          echo ::set-env name=TAG::${cat img_tag/docker_img_tag.txt}
          echo ${IMAGE}
      - name: Set version in pom
        run: |
          mvn versions:set -DnewVersion="$TAG"
          mvn versions:commit
      - name: Build and Publish to Docker Image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build --tag ${IMAGE} .
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker push ${IMAGE)
