# Java Maven CircleCI 2.0 configuration file
#
# check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
  nais: 'navikt/nais-deployment@1.1.1'
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

    working_directory: ~/repo

    environment:
      # customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout
      # download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # download libarx
      - run: wget  https://github.com/oslomet-arx-as-a-service/arx-dependency/raw/master/libarx-3.7.1.jar -P ./src/main/resources/
      # maven install libarx as local dependency
      - run: mvn -q install:install-file -Dfile=src/main/resources/libarx-3.7.1.jar -DgroupId=org.deidentifier -DartifactId=libarx -Dversion=3.7.1 -Dpackaging=jar

      # prepare code climate test reporter
      - run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run: chmod +x ./cc-test-reporter
      - run: ./cc-test-reporter before-build

      # resolve dependencies, plugins, reports
      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run all tests!
      - run: mvn package

      # run code climate test reporter and upload
      - run: JACOCO_SOURCE_PATH=src/main/java ./cc-test-reporter format-coverage -d ./target/site/jacoco/jacoco.xml --input-type jacoco
      - run: ./cc-test-reporter upload-coverage -d

      - persist_to_workspace:
          root: target
          paths: ./*

  publish-docs:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      # Attach workspace containing generated docs
      - attach_workspace:
          at: target
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email $GITHUB_PAGES_EMAIL
            git config user.name "ci-build"
      - run:
          name: Deploy docs to gh-pages branch
          # Add message [ci skip] to stop circle ci running the commit
          command: gh-pages --dist target/generated-docs --message "[ci skip]"

  publish-to-dockerhub:
    docker:
      - image: circleci/ruby:2.4.2-jessie-node
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: target
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - run: |
          echo 'export DATE=`date +"%m-%d-%y"`' >> $BASH_ENV
          echo 'export TAG=$DATE-$CIRCLE_SHA1' >> $BASH_ENV
      - run: |
          echo $TAG
      - run: docker build -t navikt/arxaas:$TAG .
      - run: docker tag $TAG latest
      - run: docker push navikt/arxaas:$TAG

  deploy-dev:
    docker:
      - image: "navikt/deployment-cli:v0.1.7"
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: target
      - run:
          name: Checkout NAIS config repository
          command: git clone https://github.com/navikt/arxaas-nais-config.git
      # Publish to Dockerhub
      - nais/docker-deploy:
          image: navikt/arxaas
      - run:
          name: Create github deployment for dev-fss
          command: deployment-cli deploy create
                     --cluster=dev-fss
                     --repository=navikt/arxaas
                     --team=$TEAMNAME
                     --resource=arxaas-nais-config/nais.yaml
                     --version=$CIRCLE_SHA1
                     --vars=arxaas-nais-config/nais-dev-placeholders.json

workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - publish-docs:
          requires:
            - build
          filters:
            branches:
              only: master
      - publish-to-dockerhub:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - deploy-dev:
          requires:
            - build
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*$/
            branches:
              ignore: /.*/